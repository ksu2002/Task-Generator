# Error.hpp ResultWindow.hpp Task.hpp TaskGenerator.hpp interface.hpp
!Error.cpp Error.hpp cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar cwctype errno.h exception initializer_list ios iosfwd limits limits.h locale.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error type_traits typeinfo wchar.h wctype.h #<#>
!Error.hpp cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar cwctype errno.h exception initializer_list ios iosfwd limits limits.h locale.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error type_traits typeinfo wchar.h wctype.h #<#>
!ResultWindow.cpp ResultWindow.hpp Task.hpp TaskGenerator.hpp cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar cwctype errno.h exception fstream graphics.h initializer_list interface.hpp ios iosfwd iostream istream keys_n_colors.h limits limits.h locale.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error time.h type_traits typeinfo utility vector wchar.h wctype.h #<#>
!ResultWindow.hpp cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar cwctype errno.h exception graphics.h initializer_list ios iosfwd keys_n_colors.h limits limits.h locale.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error type_traits typeinfo wchar.h wctype.h #<#>
!Task.cpp Task.hpp cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar cwctype errno.h exception initializer_list ios iosfwd limits limits.h locale.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error type_traits typeinfo wchar.h wctype.h #<#>
!Task.hpp cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar cwctype errno.h exception initializer_list ios iosfwd limits limits.h locale.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error type_traits typeinfo wchar.h wctype.h #<#>
!TaskGenerator.cpp Error.hpp ResultWindow.hpp Task.hpp TaskGenerator.hpp cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar cwctype errno.h exception fstream graphics.h initializer_list interface.hpp ios iosfwd iostream istream keys_n_colors.h limits limits.h locale.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error time.h type_traits typeinfo utility vector wchar.h wctype.h #<#>
!TaskGenerator.hpp Task.hpp cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar cwctype errno.h exception fstream graphics.h initializer_list ios iosfwd iostream istream keys_n_colors.h limits limits.h locale.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error time.h type_traits typeinfo utility vector wchar.h wctype.h #<#>
!interface.cpp cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar errno.h exception graphics.h initializer_list interface.hpp iosfwd keys_n_colors.h limits limits.h locale.h new signal.h stddef.h stdint.h stdio.h stdlib.h string string_view type_traits typeinfo wchar.h #<#>
!interface.hpp cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar errno.h exception graphics.h initializer_list iosfwd keys_n_colors.h limits limits.h locale.h new signal.h stddef.h stdint.h stdio.h stdlib.h string string_view type_traits typeinfo wchar.h #<#>
!main.cpp Task.hpp TaskGenerator.hpp cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar cwctype errno.h exception fstream graphics.h initializer_list ios iosfwd iostream istream keys_n_colors.h limits limits.h locale.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error time.h type_traits typeinfo utility vector wchar.h wctype.h #<#>
Button _type_ #<interface.hpp>
Button(int posX, int posY, int sizeX, int sizeY) #<interface.hpp>
Checkbox _type_ #<interface.hpp>
Checkbox(int posX, int posY, int sizeX, int sizeY, char op) #<interface.hpp>
Error _type_ #<Error.hpp>
Error() -> virtual~ #<Error.hpp>
ErrorWindow _type_ #<ResultWindow.hpp>
ResultWindow _type_ #<ResultWindow.hpp>
ResultWindow() -> virtual~ #<ResultWindow.hpp>
SuccessWindow _type_ #<ResultWindow.hpp>
Task _type_ #<Task.hpp>
Task(Task* operandLeft, char operation, Task* operandRight) #<Task.hpp>
Task(int number) #<Task.hpp>
TasksGenerator _type_ #<TaskGenerator.hpp>
TextView _type_ #<interface.hpp>
TextView(int posX, int posY, int sizeX, int sizeY) #<interface.hpp>
WrongRange _type_ #<Error.hpp>
isMouseClicked : int #<interface.hpp>
isMouseReleased : int #<interface.hpp>
main() -> int #<main.cpp>
maxNumberOfGenerations : int #<TaskGenerator.hpp>
	Button:%posX : int #<interface.hpp>
	Button:%posY : int #<interface.hpp>
	Button:%sizeX : int #<interface.hpp>
	Button:%sizeY : int #<interface.hpp>
	Button::isClick(int x, int y) -> virtual bool #<interface.hpp>
	Checkbox:%checkbox : IMAGE* #<interface.hpp>
	Checkbox:%op : char #<interface.hpp>
	Checkbox:%isShowImage : bool #<interface.hpp>
	Checkbox:%posX : int #<interface.hpp>
	Checkbox:%posY : int #<interface.hpp>
	Checkbox:%sizeX : int #<interface.hpp>
	Checkbox:%sizeY : int #<interface.hpp>
	Checkbox::isClick(int x, int y) -> bool #<interface.hpp>
	Checkbox::getOperation() -> char #<interface.hpp>
	Checkbox::loadImage() -> void #<interface.hpp>
	Checkbox::isClick(int x, int y) -> virtual bool #<interface.hpp>
	Error::errorMessage() -> virtual string #<Error.hpp>
	ErrorWindow:%background : IMAGE* #<ResultWindow.hpp>
	ErrorWindow::draw() -> void #<ResultWindow.hpp>
	ErrorWindow::draw() -> virtual void #<ResultWindow.hpp>
	ResultWindow:%background : IMAGE* #<ResultWindow.hpp>
	ResultWindow::draw() -> virtual void #<ResultWindow.hpp>
	SuccessWindow:%background : IMAGE* #<ResultWindow.hpp>
	SuccessWindow::draw() -> void #<ResultWindow.hpp>
	SuccessWindow::draw() -> virtual void #<ResultWindow.hpp>
	Task:%operation : char #<Task.hpp>
	Task:%operandLeft : Task* #<Task.hpp>
	Task:%operandRight : Task* #<Task.hpp>
	Task:%number : int #<Task.hpp>
	Task:%prioritet() -> int #<Task.hpp>
	Task:%getOperation() -> char #<Task.hpp>
	Task::print : void #<Task.hpp>
	TasksGenerator:%tasksNumb : int #<TaskGenerator.hpp>
	TasksGenerator:%operationsNumb : int #<TaskGenerator.hpp>
	TasksGenerator:%min : int #<TaskGenerator.hpp>
	TasksGenerator:%max : int #<TaskGenerator.hpp>
	TasksGenerator:%operations : vector #<TaskGenerator.hpp>
	TasksGenerator:%tasks : vector #<TaskGenerator.hpp>
	TasksGenerator:%checkIsNumberIsFits(char op, int numberLeft, int res, int& numberRight) -> bool #<TaskGenerator.hpp>
	TasksGenerator:%generateTask(int operationsNumb, int res) -> Task* #<TaskGenerator.hpp>
	TasksGenerator:%decomposeLeftAndCreateRightOperands(char op, int numberRight, int operationsLeftOperand, int res) -> Task* #<TaskGenerator.hpp>
	TasksGenerator:%decomposeRightAndCreateLeftOperands(char op, int numberLeft, int operationsRightOperand, int res) -> Task* #<TaskGenerator.hpp>
	TasksGenerator:%decomposeBothOperand(char op, int numberLeft, int operationsLeftOperand, int numberRight, int operationsRightOperand) -> Task* #<TaskGenerator.hpp>
	TasksGenerator:%createLeftandRigth(char op, int numberLeft, int numberRight) -> Task* #<TaskGenerator.hpp>
	TasksGenerator::draw() -> void #<TaskGenerator.hpp>
	TasksGenerator::generate() -> void #<TaskGenerator.hpp>
	TextView:%posX : int #<interface.hpp>
	TextView:%posY : int #<interface.hpp>
	TextView:%sizeX : int #<interface.hpp>
	TextView:%sizeY : int #<interface.hpp>
	TextView:%isNumberDialed : bool #<interface.hpp>
	TextView:%number : string #<interface.hpp>
	TextView:%length : int #<interface.hpp>
	TextView:%result : int #<interface.hpp>
	TextView::isClick(int x, int y) -> int #<interface.hpp>
	WrongRange::errorMessage() -> string #<Error.hpp>
	WrongRange::errorMessage() -> virtual string #<Error.hpp>
